// Generated by CoffeeScript 1.4.0
(function() {
  var AppView, LogEntry, LogEntryList, LogEntryRowView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  LogEntry = (function(_super) {

    __extends(LogEntry, _super);

    function LogEntry() {
      return LogEntry.__super__.constructor.apply(this, arguments);
    }

    return LogEntry;

  })(Backbone.Model);

  LogEntryList = (function(_super) {

    __extends(LogEntryList, _super);

    function LogEntryList() {
      this.total_time = __bind(this.total_time, this);
      return LogEntryList.__super__.constructor.apply(this, arguments);
    }

    LogEntryList.prototype.model = LogEntry;

    LogEntryList.prototype.localStorage = new Backbone.LocalStorage("exercise_log_db");

    LogEntryList.prototype.total_time = function() {
      var _this = this;
      return this.reduce(function(sum, model) {
        return sum + (parseInt(model.get('time')) || 0);
      }, 0);
    };

    return LogEntryList;

  })(Backbone.Collection);

  LogEntryRowView = (function(_super) {

    __extends(LogEntryRowView, _super);

    function LogEntryRowView() {
      this.remove_entry = __bind(this.remove_entry, this);

      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return LogEntryRowView.__super__.constructor.apply(this, arguments);
    }

    LogEntryRowView.prototype.tagName = "tr";

    LogEntryRowView.prototype.template = _.template($('#row_item_template').html());

    LogEntryRowView.prototype.events = {
      'click #remove_entry': 'remove_entry'
    };

    LogEntryRowView.prototype.initialize = function() {
      return this.listenTo(this.model, 'destroy', this.remove);
    };

    LogEntryRowView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    LogEntryRowView.prototype.remove_entry = function() {
      return this.model.destroy();
    };

    return LogEntryRowView;

  })(Backbone.View);

  AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      this.get_date = __bind(this.get_date, this);

      this.get_selected_type = __bind(this.get_selected_type, this);

      this.new_entry = __bind(this.new_entry, this);

      this.add_entry = __bind(this.add_entry, this);

      this.render = __bind(this.render, this);

      this.add_exercise_option = __bind(this.add_exercise_option, this);

      this.populate_exercise_options = __bind(this.populate_exercise_options, this);

      this.create_entry_list = __bind(this.create_entry_list, this);

      this.start_date_picker = __bind(this.start_date_picker, this);

      this.initialize = __bind(this.initialize, this);
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = '#exercise_log_app';

    AppView.prototype.summary_template = _.template($('#summary_template').html());

    AppView.prototype.exercise_option_template = _.template($('#exercise_option_template').html());

    AppView.prototype.exercise_options = ['corrida', 'natação', 'bicicleta'];

    AppView.prototype.events = {
      'click #add_new_entry': 'new_entry'
    };

    AppView.prototype.initialize = function() {
      this.start_date_picker();
      this.summary_info = this.$('#summary_info');
      this.input_time = this.$('#input_time');
      this.select_exercise = this.$('#select_exercise');
      this.populate_exercise_options();
      return this.create_entry_list();
    };

    AppView.prototype.start_date_picker = function() {
      this.date_picker = $('#input_date');
      return this.date_picker.datepicker({
        format: 'dd-mm-yyyy'
      });
    };

    AppView.prototype.create_entry_list = function() {
      this.entry_list = new LogEntryList;
      this.listenTo(this.entry_list, 'add', this.add_entry);
      this.listenTo(this.entry_list, 'all', this.render);
      return this.entry_list.fetch({
        update: true
      });
    };

    AppView.prototype.populate_exercise_options = function() {
      return _.each(this.exercise_options, this.add_exercise_option);
    };

    AppView.prototype.add_exercise_option = function(option) {
      return this.select_exercise.append(this.exercise_option_template({
        option: option
      }));
    };

    AppView.prototype.render = function() {
      var total;
      total = this.entry_list.total_time();
      this.summary_info.html(this.summary_template({
        total: total
      }));
      return this;
    };

    AppView.prototype.add_entry = function(entry) {
      var view;
      view = new LogEntryRowView({
        model: entry
      });
      return this.$('#log_entries').append(view.render().el);
    };

    AppView.prototype.new_entry = function() {
      var entry;
      if (parseInt(this.input_time.val()) >= 0) {
        entry = {
          time: this.input_time.val(),
          exercise_type: this.get_selected_type(),
          date_info: this.get_date()
        };
        this.entry_list.create(entry);
        return this.input_time.val('');
      } else {
        return alert("O horário tem que ter valor maior que 0");
      }
    };

    AppView.prototype.get_selected_type = function() {
      return $("option:selected", this.select_exercise).val();
    };

    AppView.prototype.get_date = function() {
      return this.date_picker.val();
    };

    return AppView;

  })(Backbone.View);

  $(function() {
    return new AppView;
  });

}).call(this);
